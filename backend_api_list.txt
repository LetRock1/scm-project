===============================
 SCM Blockchain Backend - API List
===============================

Base URL: http://127.0.0.1:5000

--------------------------------
 AUTH ROUTES (/api/auth/...)
--------------------------------

1. POST /api/auth/register
   Description: Register a new user (manufacturer, distributor, retailer, super_admin).
   Request JSON:
     { "username": "m1", "password": "pass", "role": "manufacturer" }
   Sample Response (201):
     {
       "message": "user registered",
       "user": { "id": 1, "username": "m1", "role": "manufacturer", "created_at": 1699999999.0 }
     }

2. POST /api/auth/login
   Description: Login to get JWT token.
   Request JSON:
     { "username": "m1", "password": "pass" }
   Sample Response (200):
     {
       "access_token": "<JWT_TOKEN>",
       "user": { "id": 1, "username": "m1", "role": "manufacturer", "created_at": 1699999999.0 }
     }

3. GET /api/auth/me
   Headers: Authorization: Bearer <JWT_TOKEN>
   Description: Get current logged in user info.
   Sample Response (200):
     {
       "id": "1",
       "username": "m1",
       "role": "manufacturer"
     }

4. GET /api/auth/users   (super_admin only)
   Description: List all users.
   Response: [ { "id": 1, "username": "m1", "role": "manufacturer", "created_at": ... }, ... ]

5. DELETE /api/auth/users/<username>   (super_admin only)
   Query Params: ?cascade=true (optional)
   Description: Delete a user (optionally cascade delete their products & histories).
   Response Example:
     {
       "message": "user 'd1' deleted",
       "cascade": true,
       "deleted_products": ["<product_id1>", "<product_id2>"],
       "block": { ... }
     }

--------------------------------
 USER ROUTES (/api/users/...)
--------------------------------

1. GET /api/users/list_by_role?role=distributor
   Headers: Authorization: Bearer <JWT_TOKEN>
   Description: List all users of a given role.
   Response Example (200):
     [
       { "username": "d1" },
       { "username": "d2" }
     ]

--------------------------------
 PRODUCT ROUTES (/api/products/...)
--------------------------------

1. POST /api/products/
   Role: manufacturer only
   Description: Create a new product.
   Request JSON:
     { "name": "Paracetamol", "description": "500mg tablet" }
   Response (201):
     {
       "message": "Product created successfully",
       "product": { "product_id": "...", "name": "Paracetamol", "owner": "m1", ... },
       "block": { ... },
       "qr_code_base64": "<QR_IMAGE_DATA>",
       "qr_url": "/api/products/<pid>/qrcode",
       "history_url": "/api/products/<pid>/history"
     }

2. POST /api/products/update
   Role: manufacturer, distributor, retailer
   Description: Update product status / custody transfer.
   Request JSON Example:
     { "product_id": "<pid>", "status": "ReadyForShipping", "transfer_to_username": "d1" }
   Response (200):
     {
       "message": "Update successful",
       "product": { ... },
       "block": { ... }
     }

3. GET /api/products/<product_id>
   Optional Auth
   Description: Get product details.
   Response (200): { "product_id": "...", "name": "...", "custodian": "...", ... }

4. GET /api/products
   Auth required
   Query Params: page, per_page, status, owner, from, to, sort
   Response: { "page": 1, "per_page": 10, "total": 1, "products": [ { ... } ] }

5. GET /api/products/search?query=para
   Auth required
   Response: [ { "product_id": "...", "name": "Paracetamol", ... } ]

6. DELETE /api/products/<product_id>   (super_admin only)
   Response (200):
     {
       "message": "product deleted",
       "product_id": "...",
       "block": { ... }
     }

7. GET /api/products/<product_id>/export   (super_admin only)
   Response: CSV file with history

8. GET /api/products/blockchain
   Description: Get full blockchain of all products.
   Response: [ { "index": 1, "timestamp": ..., "data": { ... }, ... }, ... ]

9. GET /api/products/blockchain/<product_id>
   Response: [ { "index": 2, "data": { "product_id": "<pid>", ... } }, ... ]

10. GET /api/products/blockchain/verify
    Response: { "valid": true, "message": "Blockchain is valid" }

11. GET /api/products/<product_id>/qrcode
    Returns QR code image (PNG).

12. GET /api/products/<product_id>/history
    Response:
      {
        "product_details": { "product_id": "...", "name": "...", ... },
        "verified_history_timeline": [ { "status": "Created", "actor": "m1", ... }, ... ],
        "blockchain_verified": true,
        "verification_message": "Blockchain is valid"
      }

--------------------------------
 CHAIN ROUTES (/api/chain/...)
--------------------------------

1. GET /api/chain/
   Response:
     {
       "chain": [ { "index": 0, "data": { "type": "genesis" }, ... }, ... ],
       "valid": true,
       "message": "Blockchain is valid"
     }

2. GET /api/chain/validate
   Response: { "valid": true, "message": "Blockchain is valid" }

--------------------------------
 ROOT ROUTE (/)
--------------------------------
GET /
Response: { "message": "SCM Blockchain Backend running" }

